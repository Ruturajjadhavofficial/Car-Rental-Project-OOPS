// Class to manage the entire car rental system
class RentalSystem {
    // Lists to hold cars, customers, and rental transactions
    private List<Car> carRent;
    private List<Customer> customerRent;
    private List<Rental> rent;
    
    // Constructor to initialize empty lists
    public RentalSystem() {
        carRent = new ArrayList<>();
        customerRent = new ArrayList<>();
        rent = new ArrayList<>();
    }
    
    // Method to add a new car to the system
    public void addCar(Car car) {
        carRent.add(car);
    }
    
    // Method to add a new customer to the system
    public void addCustomer(Customer c) {
        customerRent.add(c);
    }
    
    // Method to rent a car if available
    public void rentCar(Car car, Customer customer, int days) {
        if (car.isAvailable()) {
            car.rent(); // Set car availability to false
            rent.add(new Rental(car, customer, days)); // Add rental record
        } else {
            System.out.println("Car is not available for rent.");
        }
    }
    
    // Method to return a rented car
    public void returnCar(Car car) {
        Rental rentalToRemove = null;
        for (Rental r : rent) {
            if (r.getCar() == car) {
                rentalToRemove = r; // Find the rental to remove
                break;
            }
        }
        if (rentalToRemove != null) {
            rent.remove(rentalToRemove); // Remove rental record
            car.returnCar(); // Mark car as available
            System.out.println("Car returned successfully!");
        } else {
            System.out.println("Car was not rented.");
        }
    }
    
    // Method to display the menu and handle user interactions
    public void menu() {
        Scanner sc = new Scanner(System.in);
        while (true) {
            System.out.println("--------- Welcome to Car Rental System -----------");
            System.out.println("1. Rent a Car");
            System.out.println("2. Return a Car");
            System.out.println("3. Exit");
            System.out.println("Enter Your Choice:");
            int choice = sc.nextInt();
            sc.nextLine(); // Clear buffer
            
            // Rent a car option
            if (choice == 1) {
                System.out.println("\n------------------- Rent a Car -------------------");
                System.out.println("Enter Your Name:");
                String customerName = sc.nextLine();
                
                // Display available cars
                System.out.println("\nAvailable Cars:");
                for (Car c : carRent) {
                    if (c.isAvailable()) {
                        System.out.println(c.getCarId() + " - " + c.getModel() + " - " + c.getBrand() + " - $" + c.getPricePerDay());
                    }
                }
                
                // Car selection and rental process
                System.out.println("\nEnter the carId you want to rent:");
                String carMenu = sc.nextLine();
                System.out.println("\nEnter the number of days for rental:");
                int rentalDays = sc.nextInt();
                sc.nextLine(); // Clear buffer
                
                // Create and add a new customer
                Customer newCustomer = new Customer("CUS" + (customerRent.size() + 1), customerName);
                addCustomer(newCustomer);
                
                // Find the selected car
                Car selectedCar = null;
                for (Car c : carRent) {
                    if (c.getCarId().equals(carMenu) && c.isAvailable()) {
                        selectedCar = c;
                        break;
                    }
                }
                
                // Proceed if a valid car is selected
                if (selectedCar != null) {
                    double total = selectedCar.calculatePrice(rentalDays);
                    System.out.printf("\nRental Information:\nCustomer ID: %s\nCustomer Name: %s\nCar: %s %s\nRental Days: %d\nTotal Price: $%.2f%n", 
                        newCustomer.getCustomerId(), newCustomer.getName(), selectedCar.getBrand(), selectedCar.getModel(), rentalDays, total);
                    
                    System.out.println("Confirm rental (Y/N):");
                    String confirm = sc.nextLine();
                    if (confirm.equalsIgnoreCase("Y")) {
                        rentCar(selectedCar, newCustomer, rentalDays);
                        System.out.println("Car rented successfully. Enjoy your ride!");
                    } else {
                        System.out.println("Rental cancelled.");
                    }
                } else {
                    System.out.println("Invalid car selection or car is not available.");
                }
            }
            // Return a car option
            else if (choice == 2) {
                System.out.println("Enter the carId of the car you want to return:");
                String carChoice = sc.nextLine();
                Car carToReturn = null;
                for (Car c : carRent) {
                    if (c.getCarId().equals(carChoice) && !c.isAvailable()) {
                        carToReturn = c;
                        break;
                    }
                }
                
                // Proceed if a valid car is found
                if (carToReturn != null) {
                    Customer customer = null;
                    for (Rental r : rent) {
                        customer = r.getCustomer();
                        break;
                    }
                    if (customer != null) {
                        returnCar(carToReturn);
                        System.out.println("Car returned successfully by " + customer.getName());
                    } else {
                        System.out.println("Car was not rented or rental information is missing.");
                    }
                } else {
                    System.out.println("Invalid car ID or car is not rented.");
                }
            }
            // Exit option
            else if (choice == 3) {
                break;
            } else {
                System.out.println("Invalid choice. Please try again.");
            }
        }
        System.out.println("\nThank you for using the Car Rental System!");
    }
}
